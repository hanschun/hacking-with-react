'use strict';var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();Object.defineProperty(exports, "__esModule", { value: true });var _react = require('react');var _react2 = _interopRequireDefault(_react);var _superagent = require('superagent');var _superagent2 = _interopRequireDefault(_superagent);var _reactRouter = require('react-router');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self, call) {if (!self) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call && (typeof call === "object" || typeof call === "function") ? call : self;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var 



Detail = function (_React$Component) {_inherits(Detail, _React$Component);
  function Detail(props) {_classCallCheck(this, Detail);var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Detail).call(this, 
    props));

    _this.state = { 
      mode: 'commits', 
      commits: [], 
      forks: [], 
      pulls: [] };return _this;}_createClass(Detail, [{ key: 'fetchFeed', value: function fetchFeed(


    type) {var _this2 = this;
      if (this.props.params.repo === '') {
        return; //empty repo
      }
      var baseURL = 'https://api.github.com/repos/facebook';
      _superagent2.default.get(baseURL + '/' + this.props.params.repo + '/' + type).
      end(function (error, response) {
        if (!error && response) {
          _this2.setState(_defineProperty({}, type, response.body));} else 
        {
          console.log('Error fetching ' + type, error);}});} }, { key: 'componentWillMount', value: function componentWillMount() 



    {
      this.fetchFeed('commits');
      this.fetchFeed('forks');
      this.fetchFeed('pulls');} }, { key: 'renderCommits', value: function renderCommits() 

    {
      return _react2.default.createElement('div', null, 
      this.state.commits.map(function (commit, index) {
        var author = commit.author ? commit.author.login : 'Anonymous';

        return _react2.default.createElement('p', { key: index }, 
        _react2.default.createElement(_reactRouter.Link, { to: '/user/' + author }, author), ':', 
        _react2.default.createElement('a', { href: commit.html_url }, commit.commit.message), '.');}));} }, { key: 'renderForks', value: function renderForks() 




    {
      return _react2.default.createElement('div', null, 
      this.state.forks.map(function (fork, index) {
        var owner = fork.owner ? fork.owner.login : 'Anonymous';

        return _react2.default.createElement('p', { key: index }, 
        _react2.default.createElement(_reactRouter.Link, { to: '/user/' + owner }, owner), ': forked to ', _react2.default.createElement('a', { href: fork.html_url }, fork.html_url), ' at', fork.created_at, '.');}));} }, { key: 'renderPulls', value: function renderPulls() 




    {
      return _react2.default.createElement('div', null, 
      this.state.pulls.map(function (pull, index) {
        var user = pull.user ? pull.user.login : 'Anonymous';

        return _react2.default.createElement('p', { key: index }, 
        _react2.default.createElement(_reactRouter.Link, { to: '/user/' + user }, user), ':', 
        _react2.default.createElement('a', { href: pull.html_url }, pull.body), '.');}));} }, { key: 'selectMode', value: function selectMode(




    mode) {
      this.setState({ mode: mode });} }, { key: 'render', value: function render() 


    {
      var content = undefined;

      if (this.state.mode === 'commits') {
        content = this.renderCommits();} else 
      if (this.state.mode === 'forks') {
        content = this.renderForks();} else 
      {
        content = this.renderPulls();}


      return _react2.default.createElement('div', null, 
      _react2.default.createElement('p', null, ' You are here: ', _react2.default.createElement(_reactRouter.IndexLink, { to: '/', activeClassName: 'active' }, 'Home'), ' > ', this.props.params.repo), 

      _react2.default.createElement('button', { onClick: this.selectMode.bind(this, 'commits'), ref: 'commits' }, 'Show Commits'), 
      _react2.default.createElement('button', { onClick: this.selectMode.bind(this, 'forks'), ref: 'forks' }, 'Show Forks'), 
      _react2.default.createElement('button', { onClick: this.selectMode.bind(this, 'pulls'), ref: 'pulls' }, 'Show Pulls'), 
      content);} }]);return Detail;}(_react2.default.Component);exports.default = 




Detail;